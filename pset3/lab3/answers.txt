sort1 uses: Bubble sort

RANDOM5000: .126s
SORTED5000: .011s

How do you know?: Because the runtime for sorted5000 was faster than for random5000 and only bubble sort has a better omega notation.

sort2 uses: Merge sort

RANDOM5000: .012s
SORTED5000: .011s

How do you know?: Because both random5000 and sorted5000 were solved quickly and essentially in the same runtime.

sort3 uses: Selection sort

RANDOM5000: .036s
SORTED5000: .057s
RANDOM10000: .240s
SORTED10000: .319s
REVERSED5000: .081s

How do you know?: Because the runtimes were slower than sort2 and selection sort is slower than merge sort. Also reversed was longest, because selection has to step through the maximum number of times.

NOTES:

Notation:

Merge
O(n log n)
omega(n log n)

Selection
O(n2)
omega(n2)

Bubble
O(n2)
omega(n)

Considerations:

Only bubble sort has a better omega. Omega would be if sorted already. Random and sorted run time would be different with sorted run time being faster.
Both merge and selection sort are theta algorithms.
Merge sort is faster than selection sort.
