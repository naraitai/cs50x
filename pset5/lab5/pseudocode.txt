//Inheritance
** modeling bloodtype inheritance
** randomly generate a generation
** their children inherit bloodtype
** Continue for 3 generations

// create_family
** Takes an integer as input (generations)
** One person should be allocated for each member of the family for those generations
** Needs to point to youngest generation
** Each person needs alleles assigned to them.
** Oldest generation should have randomly generated alleles (random_allele)
** Younger should inherit one allele from each parent
** Oldest generation their parents are NULL
//Allocate memory for a new person (malloc(sizeof(person))

allocate memory with size of person (malloc(sizeof(person))
check for errors (if == NULL...)
recursively call function



assign random allele to person


// If generations is more than 1, recursively call function to create parents
// Randomly choose one allele from parents and assign to new person.
// If generations is 1, then this is first generation. parents set to NULL and randomly generate allele
// Return a pointer to the created person.


// free_family
// takes a pointer to a person as input
// free memory for that person and recursively free memory for all ancestors.
// base case. if input to function is NULL, immediately return
// otherwise free both person's parents before freeing the child.


NOTES
rand() useful for randomly assigning allelles
rand() % 2 will return either 0 or 1
-> notation to access variable via pointer

